name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  # Test database credentials (CI only)
  TEST_DB_USER: postgres
  TEST_DB_PASSWORD: testpass123
  TEST_DB_NAME: gymart

jobs:
  backend-checks:
    name: 🔧 Backend Quality Checks
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ${{ env.TEST_DB_USER }}
          POSTGRES_PASSWORD: ${{ env.TEST_DB_PASSWORD }}
          POSTGRES_DB: ${{ env.TEST_DB_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            api/package-lock.json

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd api && npm ci

      - name: 🧹 Lint backend code
        run: npm run lint --workspace=api

      - name: 💅 Check code formatting
        run: npx prettier --check api/src/**/*.js

      - name: 🔒 Security audit
        run: npm audit --workspace=api --audit-level=high

      - name: 🧪 Run unit tests
        run: npm run test --workspace=api
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: ${{ env.TEST_DB_USER }}
          DB_PASSWORD: ${{ env.TEST_DB_PASSWORD }}
          DB_NAME: ${{ env.TEST_DB_NAME }}

      - name: 🧪 Run integration tests
        run: npm run test:integration --workspace=api
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: ${{ env.TEST_DB_USER }}
          DB_PASSWORD: ${{ env.TEST_DB_PASSWORD }}
          DB_NAME: ${{ env.TEST_DB_NAME }}

  frontend-checks:
    name: 🎨 Frontend Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            client/package-lock.json

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd client && npm ci

      - name: 🧹 Lint frontend code
        run: npm run lint --workspace=client

      - name: 📝 TypeScript type checking
        run: npm run type-check --workspace=client

      - name: 💅 Check code formatting
        run: npx prettier --check client/src/**/*.{js,jsx,ts,tsx}

      - name: 🔒 Security audit
        run: npm audit --workspace=client --audit-level=high

      - name: 🏗️ Build frontend
        run: npm run build --workspace=client
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: client/.next/
          retention-days: 1

  docker-validation:
    name: 🐳 Docker Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-checks, frontend-checks]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔧 Validate Docker Compose configuration
        run: docker compose config

      - name: 🏗️ Build Docker images
        run: docker compose build

      - name: 🚀 Start services
        run: docker compose up -d

      - name: ⏳ Wait for services to be ready
        run: |
          echo "Waiting for services to be healthy..."
          timeout 120s bash -c 'until docker compose ps --format json | jq -e ".[] | select(.Health == \"healthy\")" > /dev/null; do sleep 5; done'

      - name: 🏥 Health check API
        run: |
          echo "Testing API health endpoint..."
          response=$(curl -s http://localhost:3001/api/health)
          echo "Response: $response"
          echo "$response" | jq -e '.status == "ok"'

      - name: 🧪 Test API endpoints
        run: |
          echo "Testing API endpoints..."

          # Test root endpoint
          curl -f http://localhost:3001/ | jq -e '.name == "GymArt API"'

          # Test /api/test endpoint
          curl -f http://localhost:3001/api/test | jq -e '.ok == true'

          # Test frontend accessibility
          curl -f http://localhost:3000 -o /dev/null

      - name: 📊 Show container logs on failure
        if: failure()
        run: |
          echo "=== API Logs ==="
          docker compose logs api
          echo "=== Client Logs ==="
          docker compose logs client
          echo "=== PostgreSQL Logs ==="
          docker compose logs postgres

      - name: 🧹 Cleanup
        if: always()
        run: docker compose down -v

  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  performance-test:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [docker-validation]
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Start services
        run: |
          docker compose up -d
          sleep 30

      - name: ⚡ Load testing with Apache Bench
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2-utils

          echo "Load testing /api/health endpoint..."
          ab -n 100 -c 10 http://localhost:3001/api/health

          echo "Load testing /api/test endpoint..."
          ab -n 100 -c 10 http://localhost:3001/api/test

      - name: 🧹 Cleanup
        if: always()
        run: docker compose down -v

  deployment-ready:
    name: ✅ Deployment Ready
    runs-on: ubuntu-latest
    needs: [backend-checks, frontend-checks, docker-validation]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🎉 Mark as deployment ready
        run: |
          echo "🚀 All checks passed! Ready for deployment."
          echo "✅ Backend quality checks: PASSED"
          echo "✅ Frontend quality checks: PASSED" 
          echo "✅ Docker integration tests: PASSED"
          echo "📦 Artifacts ready for deployment"

      - name: 📝 Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Quality | ✅ PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Quality | ✅ PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Integration | ✅ PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ✅ PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Ready for production deployment!**" >> $GITHUB_STEP_SUMMARY
