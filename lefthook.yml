# Configuration Lefthook optimis√©e pour GymArt
# Automatise la qualit√© de code et les v√©rifications avant commit/push

pre-commit:
  parallel: true # Ex√©cute les commandes en parall√®le pour plus de rapidit√©
  commands:
    # Formatage automatique avec Prettier (global)
    prettier:
      glob: '**/*.{js,jsx,ts,tsx,css,md,json,yml,yaml}'
      run: npx prettier --write {staged_files}
      stage_fixed: true # Re-ajoute automatiquement les fichiers corrig√©s
      fail_text: '‚ùå Prettier formatting failed. Please check the output above.'

    # Linting ESLint pour l'API (backend)
    eslint-api:
      glob: 'api/src/**/*.js'
      run: cd api && npm run lint:fix
      stage_fixed: true
      fail_text: '‚ùå ESLint API failed. Please fix the linting errors above.'

    # Linting ESLint pour le client (frontend)
    eslint-client:
      glob: 'client/src/**/*.{js,jsx,ts,tsx}'
      run: cd client && npm run lint:fix
      stage_fixed: true
      fail_text: '‚ùå ESLint client failed. Please fix the linting errors above.'

    # V√©rification TypeScript pour le client
    typecheck-client:
      glob: 'client/**/*.{ts,tsx}'
      run: cd client && npm run type-check
      fail_text: '‚ùå TypeScript check failed. Please fix the type errors above.'

    # V√©rification de la structure du projet
    check-structure:
      glob: '*'
      run: |
        if [ ! -d "api" ] || [ ! -d "client" ]; then
          echo "‚ùå Structure monorepo manquante (api/ et client/ requis)"
          exit 1
        fi
        echo "‚úÖ Structure monorepo valid√©e"

# V√©rification des messages de commit
commit-msg:
  commands:
    validate-commit:
      run: node scripts/validate-commit-msg.js {1}
      fail_text: |
        ‚ùå Message de commit invalide!

        Format OBLIGATOIRE: <emoji><type>: <description>

        Types autoris√©s avec emojis:
        - üöÄfeat: nouvelle fonctionnalit√©
        - üêõfix: correction de bug
        - üìÑdocs: documentation
        - üíÖstyle: formatage
        - ‚ôªÔ∏èrefactor: refactoring
        - üß™test: ajout de tests
        - üîßchore: maintenance
        - üë∑ci: int√©gration continue
        - ‚ö°perf: am√©lioration de performance
        - üì¶build: build/d√©pendances
        - ‚è™revert: annulation de commit

        Exemples VALIDES:
        ‚úÖ üöÄfeat: add user authentication
        ‚úÖ üêõfix: resolve database connection
        ‚úÖ üìÑdocs: update API documentation

        Exemples INVALIDES:
        ‚ùå feat: add user authentication (manque emoji)
        ‚ùå üöÄ feat: add user authentication (espace)
        ‚ùå üöÄfeat: Add user authentication (majuscule)

        Voir COMMIT_CONVENTIONS.md pour plus de d√©tails.

# V√©rifications avant push
pre-push:
  commands:
    # Audit de s√©curit√© npm pour l'API
    security-audit-api:
      run: |
        echo "üîí Audit de s√©curit√© API..."
        cd api && npm audit --audit-level=moderate
      fail_text: "‚ùå Vuln√©rabilit√©s de s√©curit√© d√©tect√©es dans l'API!"

    # Audit de s√©curit√© npm pour le client
    security-audit-client:
      run: |
        echo "üîí Audit de s√©curit√© Client..."
        cd client && npm audit --audit-level=moderate
      fail_text: '‚ùå Vuln√©rabilit√©s de s√©curit√© d√©tect√©es dans le client!'

    # Tests backend (si disponibles)
    test-api:
      run: |
        if [ -f "api/package.json" ] && grep -q '"test"' api/package.json; then
          echo "üß™ Ex√©cution des tests backend..."
          cd api && npm test
        else
          echo "‚ÑπÔ∏è Pas de tests backend configur√©s, skip"
        fi
      fail_text: '‚ùå Tests backend √©chou√©s. Corrigez avant de push!'

    # Build du frontend pour v√©rifier les erreurs
    build-client:
      run: |
        echo "üèóÔ∏è V√©rification du build frontend..."
        cd client && npm run build
      fail_text: '‚ùå Build client √©chou√©. Corrigez les erreurs avant de push!'

    # V√©rification finale du linting (sans auto-fix)
    final-lint-check:
      run: |
        echo "üîç V√©rification finale du linting..."
        cd api && npm run lint
        cd ../client && npm run lint
      fail_text: '‚ùå Erreurs de linting d√©tect√©es. Corrigez avant de push!'

    # V√©rification de la sant√© de l'API (si elle tourne)
    api-health:
      run: |
        if curl -f -s http://localhost:3001/api/health >/dev/null 2>&1; then
          echo "‚úÖ API health check: OK"
        else
          echo "‚ÑπÔ∏è API non accessible (normal si pas d√©marr√©e)"
        fi

    # V√©rification de la base de donn√©es (si Docker tourne)
    db-health:
      run: |
        if docker ps | grep -q postgres; then
          echo "üîç V√©rification PostgreSQL..."
          if docker-compose exec -T postgres pg_isready -U postgres -d gymart >/dev/null 2>&1; then
            echo "‚úÖ PostgreSQL: OK"
          else
            echo "‚ö†Ô∏è PostgreSQL non accessible"
          fi
        else
          echo "‚ÑπÔ∏è PostgreSQL non d√©marr√© (normal en d√©veloppement)"
        fi

# C√©l√©bration apr√®s commit r√©ussi
post-commit:
  commands:
    celebrate:
      run: echo "‚úÖ Commit GymArt valid√©! üèãÔ∏è Code format√© et v√©rifi√© automatiquement."
