#!/bin/bash

# üß™ Script de validation GymArt
# V√©rifie que l'application est correctement configur√©e et fonctionnelle

echo "üß™ Validation de l'installation GymArt"
echo "======================================"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
check_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
        return 1
    fi
}

# Fonction pour afficher les informations
info() {
    echo -e "${YELLOW}‚ÑπÔ∏è  $1${NC}"
}

# Variables
ERRORS=0

echo ""
info "V√©rification des pr√©requis..."

# V√©rifier Docker
docker --version > /dev/null 2>&1
check_result $? "Docker install√©" || ((ERRORS++))

# V√©rifier Docker Compose
docker compose version > /dev/null 2>&1
check_result $? "Docker Compose disponible" || ((ERRORS++))

echo ""
info "V√©rification de la configuration..."

# V√©rifier la configuration Docker Compose
docker compose config > /dev/null 2>&1
check_result $? "Configuration Docker Compose valide" || ((ERRORS++))

# V√©rifier les fichiers essentiels
[ -f ".env.example" ]
check_result $? "Fichier .env.example pr√©sent" || ((ERRORS++))

[ -f "compose.yml" ]
check_result $? "Fichier compose.yml pr√©sent" || ((ERRORS++))

[ -f "api/Dockerfile" ]
check_result $? "Dockerfile API pr√©sent" || ((ERRORS++))

[ -f "client/Dockerfile" ]
check_result $? "Dockerfile Client pr√©sent" || ((ERRORS++))

echo ""
info "D√©marrage des services (peut prendre quelques minutes)..."

# D√©marrer les services
docker compose up --build -d > /dev/null 2>&1
check_result $? "Services d√©marr√©s" || ((ERRORS++))

# Attendre que les services soient pr√™ts
echo ""
info "Attente de la disponibilit√© des services..."
sleep 30

# V√©rifier l'√©tat des services
docker compose ps --format "table {{.Name}}\t{{.Status}}" | grep -q "Up"
check_result $? "Services en cours d'ex√©cution" || ((ERRORS++))

echo ""
info "Test des endpoints..."

# Tester l'API Health
curl -s http://localhost:3001/api/health | grep -q '"status":"ok"'
check_result $? "API Health Check fonctionnel" || ((ERRORS++))

# Tester l'API Test
curl -s http://localhost:3001/api/test | grep -q '"ok":true'
check_result $? "API Test endpoint fonctionnel" || ((ERRORS++))

# Tester le frontend (v√©rifier qu'il r√©pond)
curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200"
check_result $? "Frontend accessible" || ((ERRORS++))

echo ""
info "Test de la base de donn√©es..."

# Tester la connexion PostgreSQL
docker compose exec -T postgres pg_isready -U postgres > /dev/null 2>&1
check_result $? "PostgreSQL accessible" || ((ERRORS++))

echo ""
info "V√©rification des logs..."

# V√©rifier qu'il n'y a pas d'erreurs critiques dans les logs
docker compose logs api 2>&1 | grep -i "error" | grep -v "warn" | wc -l | grep -q "^0$"
check_result $? "Pas d'erreurs critiques dans les logs API" || ((ERRORS++))

echo ""
echo "======================================"

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}üéâ Validation r√©ussie ! L'application est pr√™te.${NC}"
    echo ""
    echo "üìç URLs importantes:"
    echo "   ‚Ä¢ Frontend: http://localhost:3000"
    echo "   ‚Ä¢ API: http://localhost:3001"
    echo "   ‚Ä¢ Health Check: http://localhost:3001/api/health"
    echo ""
    echo "üîß Commandes utiles:"
    echo "   ‚Ä¢ Voir les logs: docker compose logs -f"
    echo "   ‚Ä¢ Arr√™ter: docker compose down"
    echo "   ‚Ä¢ Nettoyer: docker compose down -v"
else
    echo -e "${RED}‚ùå Validation √©chou√©e avec $ERRORS erreur(s).${NC}"
    echo ""
    echo "üîß Suggestions de d√©pannage:"
    echo "   ‚Ä¢ V√©rifier les logs: docker compose logs"
    echo "   ‚Ä¢ Reconstruire: docker compose build --no-cache"
    echo "   ‚Ä¢ Nettoyer et red√©marrer: docker compose down -v && docker compose up --build -d"
    exit 1
fi
